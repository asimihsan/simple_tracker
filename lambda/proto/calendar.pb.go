// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: calendar.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListCalendarsErrorReason int32

const (
	ListCalendarsErrorReason_LIST_CALENDARS_ERROR_REASON_NO_ERROR                       ListCalendarsErrorReason = 0
	ListCalendarsErrorReason_LIST_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR          ListCalendarsErrorReason = 1
	ListCalendarsErrorReason_LIST_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR ListCalendarsErrorReason = 2
)

// Enum value maps for ListCalendarsErrorReason.
var (
	ListCalendarsErrorReason_name = map[int32]string{
		0: "LIST_CALENDARS_ERROR_REASON_NO_ERROR",
		1: "LIST_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR",
		2: "LIST_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR",
	}
	ListCalendarsErrorReason_value = map[string]int32{
		"LIST_CALENDARS_ERROR_REASON_NO_ERROR":                       0,
		"LIST_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR":          1,
		"LIST_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR": 2,
	}
)

func (x ListCalendarsErrorReason) Enum() *ListCalendarsErrorReason {
	p := new(ListCalendarsErrorReason)
	*p = x
	return p
}

func (x ListCalendarsErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCalendarsErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_calendar_proto_enumTypes[0].Descriptor()
}

func (ListCalendarsErrorReason) Type() protoreflect.EnumType {
	return &file_calendar_proto_enumTypes[0]
}

func (x ListCalendarsErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCalendarsErrorReason.Descriptor instead.
func (ListCalendarsErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{0}
}

type CreateCalendarErrorReason int32

const (
	CreateCalendarErrorReason_CREATE_CALENDAR_ERROR_REASON_NO_ERROR                       CreateCalendarErrorReason = 0
	CreateCalendarErrorReason_CREATE_CALENDAR_ERROR_REASON_INTERNAL_SERVER_ERROR          CreateCalendarErrorReason = 1
	CreateCalendarErrorReason_CREATE_CALENDAR_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR CreateCalendarErrorReason = 2
)

// Enum value maps for CreateCalendarErrorReason.
var (
	CreateCalendarErrorReason_name = map[int32]string{
		0: "CREATE_CALENDAR_ERROR_REASON_NO_ERROR",
		1: "CREATE_CALENDAR_ERROR_REASON_INTERNAL_SERVER_ERROR",
		2: "CREATE_CALENDAR_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR",
	}
	CreateCalendarErrorReason_value = map[string]int32{
		"CREATE_CALENDAR_ERROR_REASON_NO_ERROR":                       0,
		"CREATE_CALENDAR_ERROR_REASON_INTERNAL_SERVER_ERROR":          1,
		"CREATE_CALENDAR_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR": 2,
	}
)

func (x CreateCalendarErrorReason) Enum() *CreateCalendarErrorReason {
	p := new(CreateCalendarErrorReason)
	*p = x
	return p
}

func (x CreateCalendarErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateCalendarErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_calendar_proto_enumTypes[1].Descriptor()
}

func (CreateCalendarErrorReason) Type() protoreflect.EnumType {
	return &file_calendar_proto_enumTypes[1]
}

func (x CreateCalendarErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateCalendarErrorReason.Descriptor instead.
func (CreateCalendarErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{1}
}

type GetCalendarsErrorReason int32

const (
	GetCalendarsErrorReason_GET_CALENDARS_ERROR_REASON_NO_ERROR                       GetCalendarsErrorReason = 0
	GetCalendarsErrorReason_GET_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR          GetCalendarsErrorReason = 1
	GetCalendarsErrorReason_GET_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR GetCalendarsErrorReason = 2
	GetCalendarsErrorReason_GET_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR      GetCalendarsErrorReason = 3
	GetCalendarsErrorReason_GET_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR       GetCalendarsErrorReason = 4
	GetCalendarsErrorReason_GET_CALENDARS_ERROR_REASON_TOO_MANY_CALENDARS_ERROR       GetCalendarsErrorReason = 5
)

// Enum value maps for GetCalendarsErrorReason.
var (
	GetCalendarsErrorReason_name = map[int32]string{
		0: "GET_CALENDARS_ERROR_REASON_NO_ERROR",
		1: "GET_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR",
		2: "GET_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR",
		3: "GET_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR",
		4: "GET_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR",
		5: "GET_CALENDARS_ERROR_REASON_TOO_MANY_CALENDARS_ERROR",
	}
	GetCalendarsErrorReason_value = map[string]int32{
		"GET_CALENDARS_ERROR_REASON_NO_ERROR":                       0,
		"GET_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR":          1,
		"GET_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR": 2,
		"GET_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR":      3,
		"GET_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR":       4,
		"GET_CALENDARS_ERROR_REASON_TOO_MANY_CALENDARS_ERROR":       5,
	}
)

func (x GetCalendarsErrorReason) Enum() *GetCalendarsErrorReason {
	p := new(GetCalendarsErrorReason)
	*p = x
	return p
}

func (x GetCalendarsErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCalendarsErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_calendar_proto_enumTypes[2].Descriptor()
}

func (GetCalendarsErrorReason) Type() protoreflect.EnumType {
	return &file_calendar_proto_enumTypes[2]
}

func (x GetCalendarsErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetCalendarsErrorReason.Descriptor instead.
func (GetCalendarsErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{2}
}

type UpdateCalendarActionType int32

const (
	UpdateCalendarActionType_UPDATE_CALENDAR_ACTION_TYPE_CHANGE_NAME            UpdateCalendarActionType = 0
	UpdateCalendarActionType_UPDATE_CALENDAR_ACTION_TYPE_CHANGE_COLOR           UpdateCalendarActionType = 1
	UpdateCalendarActionType_UPDATE_CALENDAR_ACTION_TYPE_CHANGE_NAME_AND_COLOR  UpdateCalendarActionType = 2
	UpdateCalendarActionType_UPDATE_CALENDAR_ACTION_TYPE_ADD_HIGHLIGHTED_DAY    UpdateCalendarActionType = 3
	UpdateCalendarActionType_UPDATE_CALENDAR_ACTION_TYPE_REMOVE_HIGHLIGHTED_DAY UpdateCalendarActionType = 4
)

// Enum value maps for UpdateCalendarActionType.
var (
	UpdateCalendarActionType_name = map[int32]string{
		0: "UPDATE_CALENDAR_ACTION_TYPE_CHANGE_NAME",
		1: "UPDATE_CALENDAR_ACTION_TYPE_CHANGE_COLOR",
		2: "UPDATE_CALENDAR_ACTION_TYPE_CHANGE_NAME_AND_COLOR",
		3: "UPDATE_CALENDAR_ACTION_TYPE_ADD_HIGHLIGHTED_DAY",
		4: "UPDATE_CALENDAR_ACTION_TYPE_REMOVE_HIGHLIGHTED_DAY",
	}
	UpdateCalendarActionType_value = map[string]int32{
		"UPDATE_CALENDAR_ACTION_TYPE_CHANGE_NAME":            0,
		"UPDATE_CALENDAR_ACTION_TYPE_CHANGE_COLOR":           1,
		"UPDATE_CALENDAR_ACTION_TYPE_CHANGE_NAME_AND_COLOR":  2,
		"UPDATE_CALENDAR_ACTION_TYPE_ADD_HIGHLIGHTED_DAY":    3,
		"UPDATE_CALENDAR_ACTION_TYPE_REMOVE_HIGHLIGHTED_DAY": 4,
	}
)

func (x UpdateCalendarActionType) Enum() *UpdateCalendarActionType {
	p := new(UpdateCalendarActionType)
	*p = x
	return p
}

func (x UpdateCalendarActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateCalendarActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_calendar_proto_enumTypes[3].Descriptor()
}

func (UpdateCalendarActionType) Type() protoreflect.EnumType {
	return &file_calendar_proto_enumTypes[3]
}

func (x UpdateCalendarActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateCalendarActionType.Descriptor instead.
func (UpdateCalendarActionType) EnumDescriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{3}
}

type UpdateCalendarsErrorReason int32

const (
	UpdateCalendarsErrorReason_UPDATE_CALENDARS_ERROR_REASON_NO_ERROR                       UpdateCalendarsErrorReason = 0
	UpdateCalendarsErrorReason_UPDATE_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR          UpdateCalendarsErrorReason = 1
	UpdateCalendarsErrorReason_UPDATE_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR UpdateCalendarsErrorReason = 2
	UpdateCalendarsErrorReason_UPDATE_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR      UpdateCalendarsErrorReason = 3
	UpdateCalendarsErrorReason_UPDATE_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR       UpdateCalendarsErrorReason = 4
	UpdateCalendarsErrorReason_UPDATE_CALENDARS_ERROR_REASON_TOO_MANY_CALENDARS_ERROR       UpdateCalendarsErrorReason = 5
)

// Enum value maps for UpdateCalendarsErrorReason.
var (
	UpdateCalendarsErrorReason_name = map[int32]string{
		0: "UPDATE_CALENDARS_ERROR_REASON_NO_ERROR",
		1: "UPDATE_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR",
		2: "UPDATE_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR",
		3: "UPDATE_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR",
		4: "UPDATE_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR",
		5: "UPDATE_CALENDARS_ERROR_REASON_TOO_MANY_CALENDARS_ERROR",
	}
	UpdateCalendarsErrorReason_value = map[string]int32{
		"UPDATE_CALENDARS_ERROR_REASON_NO_ERROR":                       0,
		"UPDATE_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR":          1,
		"UPDATE_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR": 2,
		"UPDATE_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR":      3,
		"UPDATE_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR":       4,
		"UPDATE_CALENDARS_ERROR_REASON_TOO_MANY_CALENDARS_ERROR":       5,
	}
)

func (x UpdateCalendarsErrorReason) Enum() *UpdateCalendarsErrorReason {
	p := new(UpdateCalendarsErrorReason)
	*p = x
	return p
}

func (x UpdateCalendarsErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateCalendarsErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_calendar_proto_enumTypes[4].Descriptor()
}

func (UpdateCalendarsErrorReason) Type() protoreflect.EnumType {
	return &file_calendar_proto_enumTypes[4]
}

func (x UpdateCalendarsErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateCalendarsErrorReason.Descriptor instead.
func (UpdateCalendarsErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{4}
}

type DeleteCalendarErrorReason int32

const (
	DeleteCalendarErrorReason_DELETE_CALENDARS_ERROR_REASON_NO_ERROR                       DeleteCalendarErrorReason = 0
	DeleteCalendarErrorReason_DELETE_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR          DeleteCalendarErrorReason = 1
	DeleteCalendarErrorReason_DELETE_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR DeleteCalendarErrorReason = 2
	DeleteCalendarErrorReason_DELETE_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR      DeleteCalendarErrorReason = 3
	DeleteCalendarErrorReason_DELETE_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR       DeleteCalendarErrorReason = 4
)

// Enum value maps for DeleteCalendarErrorReason.
var (
	DeleteCalendarErrorReason_name = map[int32]string{
		0: "DELETE_CALENDARS_ERROR_REASON_NO_ERROR",
		1: "DELETE_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR",
		2: "DELETE_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR",
		3: "DELETE_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR",
		4: "DELETE_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR",
	}
	DeleteCalendarErrorReason_value = map[string]int32{
		"DELETE_CALENDARS_ERROR_REASON_NO_ERROR":                       0,
		"DELETE_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR":          1,
		"DELETE_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR": 2,
		"DELETE_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR":      3,
		"DELETE_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR":       4,
	}
)

func (x DeleteCalendarErrorReason) Enum() *DeleteCalendarErrorReason {
	p := new(DeleteCalendarErrorReason)
	*p = x
	return p
}

func (x DeleteCalendarErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteCalendarErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_calendar_proto_enumTypes[5].Descriptor()
}

func (DeleteCalendarErrorReason) Type() protoreflect.EnumType {
	return &file_calendar_proto_enumTypes[5]
}

func (x DeleteCalendarErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteCalendarErrorReason.Descriptor instead.
func (DeleteCalendarErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{5}
}

type ListCalendarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Maximum number of calendar summaries per response page. If 0 or smaller then server will enforce an arbitrary
	// default value.
	MaxResults int64 `protobuf:"varint,3,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// This is a pagination token for the ListCalendars API. This is opaque to clients and clients cannot deserialize it
	// to ListCalendarsRequestNextToken. If clients want to resume pagination they should re-use this.
	NextToken *ListCalendarsRequestNextTokenOpaque `protobuf:"bytes,4,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
}

func (x *ListCalendarsRequest) Reset() {
	*x = ListCalendarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalendarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsRequest) ProtoMessage() {}

func (x *ListCalendarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsRequest.ProtoReflect.Descriptor instead.
func (*ListCalendarsRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{0}
}

func (x *ListCalendarsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListCalendarsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ListCalendarsRequest) GetMaxResults() int64 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *ListCalendarsRequest) GetNextToken() *ListCalendarsRequestNextTokenOpaque {
	if x != nil {
		return x.NextToken
	}
	return nil
}

type ListCalendarsRequestNextTokenOpaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpaqueNextToken   []byte `protobuf:"bytes,1,opt,name=opaque_next_token,json=opaqueNextToken,proto3" json:"opaque_next_token,omitempty"`
	EncryptionKeyUsed string `protobuf:"bytes,2,opt,name=encryption_key_used,json=encryptionKeyUsed,proto3" json:"encryption_key_used,omitempty"`
}

func (x *ListCalendarsRequestNextTokenOpaque) Reset() {
	*x = ListCalendarsRequestNextTokenOpaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalendarsRequestNextTokenOpaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsRequestNextTokenOpaque) ProtoMessage() {}

func (x *ListCalendarsRequestNextTokenOpaque) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsRequestNextTokenOpaque.ProtoReflect.Descriptor instead.
func (*ListCalendarsRequestNextTokenOpaque) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{1}
}

func (x *ListCalendarsRequestNextTokenOpaque) GetOpaqueNextToken() []byte {
	if x != nil {
		return x.OpaqueNextToken
	}
	return nil
}

func (x *ListCalendarsRequestNextTokenOpaque) GetEncryptionKeyUsed() string {
	if x != nil {
		return x.EncryptionKeyUsed
	}
	return ""
}

type ListCalendarsRequestNextToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The user ID inside the token must not be used for authorization purposes. Rather you first
	// authorize the request parameters, and then compare to the inner user_id.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The session ID inside the token must not be used for authorization purposes. Rather you first
	// authorize the request parameters, and then compare to the inner session_id.
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// This is how we'll resume the DynamoDB query, using the last evaluated sort key, i.e. calendar ID. It may be
	// absent (empty map), meaning there are no more pages.
	DynamodbNextToken map[string]string `protobuf:"bytes,4,rep,name=dynamodb_next_token,json=dynamodbNextToken,proto3" json:"dynamodb_next_token,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Pagination tokens can expire to prevent indefinite re-use.
	ExpiryEpochSeconds int64 `protobuf:"varint,5,opt,name=expiry_epoch_seconds,json=expiryEpochSeconds,proto3" json:"expiry_epoch_seconds,omitempty"`
}

func (x *ListCalendarsRequestNextToken) Reset() {
	*x = ListCalendarsRequestNextToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalendarsRequestNextToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsRequestNextToken) ProtoMessage() {}

func (x *ListCalendarsRequestNextToken) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsRequestNextToken.ProtoReflect.Descriptor instead.
func (*ListCalendarsRequestNextToken) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{2}
}

func (x *ListCalendarsRequestNextToken) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListCalendarsRequestNextToken) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListCalendarsRequestNextToken) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ListCalendarsRequestNextToken) GetDynamodbNextToken() map[string]string {
	if x != nil {
		return x.DynamodbNextToken
	}
	return nil
}

func (x *ListCalendarsRequestNextToken) GetExpiryEpochSeconds() int64 {
	if x != nil {
		return x.ExpiryEpochSeconds
	}
	return 0
}

type ListCalendarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success           bool                                 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorReason       ListCalendarsErrorReason             `protobuf:"varint,2,opt,name=error_reason,json=errorReason,proto3,enum=simpletracker.ListCalendarsErrorReason" json:"error_reason,omitempty"`
	CalendarSummaries []*CalendarSummary                   `protobuf:"bytes,3,rep,name=calendarSummaries,proto3" json:"calendarSummaries,omitempty"`
	NextToken         *ListCalendarsRequestNextTokenOpaque `protobuf:"bytes,4,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
}

func (x *ListCalendarsResponse) Reset() {
	*x = ListCalendarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalendarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsResponse) ProtoMessage() {}

func (x *ListCalendarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsResponse.ProtoReflect.Descriptor instead.
func (*ListCalendarsResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{3}
}

func (x *ListCalendarsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListCalendarsResponse) GetErrorReason() ListCalendarsErrorReason {
	if x != nil {
		return x.ErrorReason
	}
	return ListCalendarsErrorReason_LIST_CALENDARS_ERROR_REASON_NO_ERROR
}

func (x *ListCalendarsResponse) GetCalendarSummaries() []*CalendarSummary {
	if x != nil {
		return x.CalendarSummaries
	}
	return nil
}

func (x *ListCalendarsResponse) GetNextToken() *ListCalendarsRequestNextTokenOpaque {
	if x != nil {
		return x.NextToken
	}
	return nil
}

type CalendarSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format version field (not an OCC field).
	FormatVersion int64  `protobuf:"varint,1,opt,name=formatVersion,proto3" json:"formatVersion,omitempty"`
	OwnerUserid   string `protobuf:"bytes,2,opt,name=ownerUserid,proto3" json:"ownerUserid,omitempty"`
	Id            string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Color         string `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	// OCC version field.
	Version int64 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CalendarSummary) Reset() {
	*x = CalendarSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarSummary) ProtoMessage() {}

func (x *CalendarSummary) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarSummary.ProtoReflect.Descriptor instead.
func (*CalendarSummary) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{4}
}

func (x *CalendarSummary) GetFormatVersion() int64 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *CalendarSummary) GetOwnerUserid() string {
	if x != nil {
		return x.OwnerUserid
	}
	return ""
}

func (x *CalendarSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CalendarSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CalendarSummary) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *CalendarSummary) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type CalendarDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *CalendarSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// Highlighted days is a list of strings. This field is first JSON-serialized and then ZLIB-compressed.
	HighlightedDays []byte `protobuf:"bytes,2,opt,name=highlighted_days,json=highlightedDays,proto3" json:"highlighted_days,omitempty"`
}

func (x *CalendarDetail) Reset() {
	*x = CalendarDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarDetail) ProtoMessage() {}

func (x *CalendarDetail) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarDetail.ProtoReflect.Descriptor instead.
func (*CalendarDetail) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{5}
}

func (x *CalendarDetail) GetSummary() *CalendarSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *CalendarDetail) GetHighlightedDays() []byte {
	if x != nil {
		return x.HighlightedDays
	}
	return nil
}

// Helper proto for a list of strings for highlighted days
type ListOfStrings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strings []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
}

func (x *ListOfStrings) Reset() {
	*x = ListOfStrings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfStrings) ProtoMessage() {}

func (x *ListOfStrings) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfStrings.ProtoReflect.Descriptor instead.
func (*ListOfStrings) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{6}
}

func (x *ListOfStrings) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type CreateCalendarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Color     string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *CreateCalendarRequest) Reset() {
	*x = CreateCalendarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCalendarRequest) ProtoMessage() {}

func (x *CreateCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCalendarRequest.ProtoReflect.Descriptor instead.
func (*CreateCalendarRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCalendarRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateCalendarRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateCalendarRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCalendarRequest) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type CreateCalendarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorReason    CreateCalendarErrorReason `protobuf:"varint,2,opt,name=error_reason,json=errorReason,proto3,enum=simpletracker.CreateCalendarErrorReason" json:"error_reason,omitempty"`
	CalendarDetail *CalendarDetail           `protobuf:"bytes,3,opt,name=calendar_detail,json=calendarDetail,proto3" json:"calendar_detail,omitempty"`
}

func (x *CreateCalendarResponse) Reset() {
	*x = CreateCalendarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCalendarResponse) ProtoMessage() {}

func (x *CreateCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCalendarResponse.ProtoReflect.Descriptor instead.
func (*CreateCalendarResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{8}
}

func (x *CreateCalendarResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateCalendarResponse) GetErrorReason() CreateCalendarErrorReason {
	if x != nil {
		return x.ErrorReason
	}
	return CreateCalendarErrorReason_CREATE_CALENDAR_ERROR_REASON_NO_ERROR
}

func (x *CreateCalendarResponse) GetCalendarDetail() *CalendarDetail {
	if x != nil {
		return x.CalendarDetail
	}
	return nil
}

type GetCalendarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId   string   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CalendarIds []string `protobuf:"bytes,3,rep,name=calendar_ids,json=calendarIds,proto3" json:"calendar_ids,omitempty"`
}

func (x *GetCalendarsRequest) Reset() {
	*x = GetCalendarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalendarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarsRequest) ProtoMessage() {}

func (x *GetCalendarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarsRequest.ProtoReflect.Descriptor instead.
func (*GetCalendarsRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{9}
}

func (x *GetCalendarsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCalendarsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetCalendarsRequest) GetCalendarIds() []string {
	if x != nil {
		return x.CalendarIds
	}
	return nil
}

type GetCalendarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool                    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorReason     GetCalendarsErrorReason `protobuf:"varint,2,opt,name=error_reason,json=errorReason,proto3,enum=simpletracker.GetCalendarsErrorReason" json:"error_reason,omitempty"`
	CalendarDetails []*CalendarDetail       `protobuf:"bytes,3,rep,name=calendar_details,json=calendarDetails,proto3" json:"calendar_details,omitempty"`
}

func (x *GetCalendarsResponse) Reset() {
	*x = GetCalendarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalendarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarsResponse) ProtoMessage() {}

func (x *GetCalendarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarsResponse.ProtoReflect.Descriptor instead.
func (*GetCalendarsResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{10}
}

func (x *GetCalendarsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetCalendarsResponse) GetErrorReason() GetCalendarsErrorReason {
	if x != nil {
		return x.ErrorReason
	}
	return GetCalendarsErrorReason_GET_CALENDARS_ERROR_REASON_NO_ERROR
}

func (x *GetCalendarsResponse) GetCalendarDetails() []*CalendarDetail {
	if x != nil {
		return x.CalendarDetails
	}
	return nil
}

type UpdateCalendarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Map calendar ID to actions on that calendar
	Actions map[string]*UpdateCalendarAction `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateCalendarsRequest) Reset() {
	*x = UpdateCalendarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCalendarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCalendarsRequest) ProtoMessage() {}

func (x *UpdateCalendarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCalendarsRequest.ProtoReflect.Descriptor instead.
func (*UpdateCalendarsRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateCalendarsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateCalendarsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpdateCalendarsRequest) GetActions() map[string]*UpdateCalendarAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type UpdateCalendarAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalendarId           string                   `protobuf:"bytes,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	ExistingVersion      int64                    `protobuf:"varint,2,opt,name=existing_version,json=existingVersion,proto3" json:"existing_version,omitempty"`
	ActionType           UpdateCalendarActionType `protobuf:"varint,3,opt,name=action_type,json=actionType,proto3,enum=simpletracker.UpdateCalendarActionType" json:"action_type,omitempty"`
	NewName              string                   `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	NewColor             string                   `protobuf:"bytes,5,opt,name=new_color,json=newColor,proto3" json:"new_color,omitempty"`
	AddHighlightedDay    string                   `protobuf:"bytes,6,opt,name=add_highlighted_day,json=addHighlightedDay,proto3" json:"add_highlighted_day,omitempty"`
	RemoveHighlightedDay string                   `protobuf:"bytes,7,opt,name=remove_highlighted_day,json=removeHighlightedDay,proto3" json:"remove_highlighted_day,omitempty"`
}

func (x *UpdateCalendarAction) Reset() {
	*x = UpdateCalendarAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCalendarAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCalendarAction) ProtoMessage() {}

func (x *UpdateCalendarAction) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCalendarAction.ProtoReflect.Descriptor instead.
func (*UpdateCalendarAction) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateCalendarAction) GetCalendarId() string {
	if x != nil {
		return x.CalendarId
	}
	return ""
}

func (x *UpdateCalendarAction) GetExistingVersion() int64 {
	if x != nil {
		return x.ExistingVersion
	}
	return 0
}

func (x *UpdateCalendarAction) GetActionType() UpdateCalendarActionType {
	if x != nil {
		return x.ActionType
	}
	return UpdateCalendarActionType_UPDATE_CALENDAR_ACTION_TYPE_CHANGE_NAME
}

func (x *UpdateCalendarAction) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *UpdateCalendarAction) GetNewColor() string {
	if x != nil {
		return x.NewColor
	}
	return ""
}

func (x *UpdateCalendarAction) GetAddHighlightedDay() string {
	if x != nil {
		return x.AddHighlightedDay
	}
	return ""
}

func (x *UpdateCalendarAction) GetRemoveHighlightedDay() string {
	if x != nil {
		return x.RemoveHighlightedDay
	}
	return ""
}

type UpdateCalendarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool                       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorReason     UpdateCalendarsErrorReason `protobuf:"varint,2,opt,name=error_reason,json=errorReason,proto3,enum=simpletracker.UpdateCalendarsErrorReason" json:"error_reason,omitempty"`
	CalendarDetails []*CalendarDetail          `protobuf:"bytes,3,rep,name=calendar_details,json=calendarDetails,proto3" json:"calendar_details,omitempty"`
}

func (x *UpdateCalendarsResponse) Reset() {
	*x = UpdateCalendarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCalendarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCalendarsResponse) ProtoMessage() {}

func (x *UpdateCalendarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCalendarsResponse.ProtoReflect.Descriptor instead.
func (*UpdateCalendarsResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCalendarsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateCalendarsResponse) GetErrorReason() UpdateCalendarsErrorReason {
	if x != nil {
		return x.ErrorReason
	}
	return UpdateCalendarsErrorReason_UPDATE_CALENDARS_ERROR_REASON_NO_ERROR
}

func (x *UpdateCalendarsResponse) GetCalendarDetails() []*CalendarDetail {
	if x != nil {
		return x.CalendarDetails
	}
	return nil
}

type DeleteCalendarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId  string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CalendarId string `protobuf:"bytes,3,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
}

func (x *DeleteCalendarRequest) Reset() {
	*x = DeleteCalendarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalendarRequest) ProtoMessage() {}

func (x *DeleteCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalendarRequest.ProtoReflect.Descriptor instead.
func (*DeleteCalendarRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteCalendarRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteCalendarRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DeleteCalendarRequest) GetCalendarId() string {
	if x != nil {
		return x.CalendarId
	}
	return ""
}

type DeleteCalendarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorReason DeleteCalendarErrorReason `protobuf:"varint,2,opt,name=error_reason,json=errorReason,proto3,enum=simpletracker.DeleteCalendarErrorReason" json:"error_reason,omitempty"`
}

func (x *DeleteCalendarResponse) Reset() {
	*x = DeleteCalendarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalendarResponse) ProtoMessage() {}

func (x *DeleteCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalendarResponse.ProtoReflect.Descriptor instead.
func (*DeleteCalendarResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteCalendarResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteCalendarResponse) GetErrorReason() DeleteCalendarErrorReason {
	if x != nil {
		return x.ErrorReason
	}
	return DeleteCalendarErrorReason_DELETE_CALENDARS_ERROR_REASON_NO_ERROR
}

var File_calendar_proto protoreflect.FileDescriptor

var file_calendar_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x22,
	0xc2, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x51, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x65, 0x64, 0x22, 0xde, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x13,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62,
	0x4e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x4e,
	0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x02, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x0e, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x61, 0x79,
	0x73, 0x22, 0x29, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x79, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0x70, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x49, 0x64, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5f, 0x0a, 0x0c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x02,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x61, 0x79, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x4c, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x10, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x70, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a, 0xbb, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e,
	0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x3e, 0x0a, 0x3a, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0xbf, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x3f, 0x0a, 0x3b, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0xe3, 0x02, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x45, 0x54, 0x5f, 0x43,
	0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00,
	0x12, 0x34, 0x0a, 0x30, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x3d, 0x0a, 0x39, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41,
	0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4c,
	0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x43,
	0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x37, 0x0a, 0x33, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x37, 0x0a, 0x33, 0x47, 0x45, 0x54, 0x5f,
	0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f,
	0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x05, 0x2a, 0x99, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x27, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41,
	0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x35, 0x0a, 0x31, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x33, 0x0a, 0x2f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e,
	0x44, 0x41, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x5f,
	0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x36, 0x0a, 0x32, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x04, 0x2a, 0xf8, 0x02,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x26,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x40, 0x0a, 0x3c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45,
	0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x59, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x3b, 0x0a, 0x37, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x5f,
	0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x3a, 0x0a, 0x36, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e,
	0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x3a, 0x0a, 0x36,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x2a, 0xbb, 0x02, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x40, 0x0a, 0x3c, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55,
	0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x3b, 0x0a,
	0x37, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44,
	0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44,
	0x41, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x3a, 0x0a, 0x36, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x45,
	0x4e, 0x44, 0x41, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x42, 0x0e, 0x5a, 0x0c, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_calendar_proto_rawDescOnce sync.Once
	file_calendar_proto_rawDescData = file_calendar_proto_rawDesc
)

func file_calendar_proto_rawDescGZIP() []byte {
	file_calendar_proto_rawDescOnce.Do(func() {
		file_calendar_proto_rawDescData = protoimpl.X.CompressGZIP(file_calendar_proto_rawDescData)
	})
	return file_calendar_proto_rawDescData
}

var file_calendar_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_calendar_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_calendar_proto_goTypes = []interface{}{
	(ListCalendarsErrorReason)(0),               // 0: simpletracker.ListCalendarsErrorReason
	(CreateCalendarErrorReason)(0),              // 1: simpletracker.CreateCalendarErrorReason
	(GetCalendarsErrorReason)(0),                // 2: simpletracker.GetCalendarsErrorReason
	(UpdateCalendarActionType)(0),               // 3: simpletracker.UpdateCalendarActionType
	(UpdateCalendarsErrorReason)(0),             // 4: simpletracker.UpdateCalendarsErrorReason
	(DeleteCalendarErrorReason)(0),              // 5: simpletracker.DeleteCalendarErrorReason
	(*ListCalendarsRequest)(nil),                // 6: simpletracker.ListCalendarsRequest
	(*ListCalendarsRequestNextTokenOpaque)(nil), // 7: simpletracker.ListCalendarsRequestNextTokenOpaque
	(*ListCalendarsRequestNextToken)(nil),       // 8: simpletracker.ListCalendarsRequestNextToken
	(*ListCalendarsResponse)(nil),               // 9: simpletracker.ListCalendarsResponse
	(*CalendarSummary)(nil),                     // 10: simpletracker.CalendarSummary
	(*CalendarDetail)(nil),                      // 11: simpletracker.CalendarDetail
	(*ListOfStrings)(nil),                       // 12: simpletracker.ListOfStrings
	(*CreateCalendarRequest)(nil),               // 13: simpletracker.CreateCalendarRequest
	(*CreateCalendarResponse)(nil),              // 14: simpletracker.CreateCalendarResponse
	(*GetCalendarsRequest)(nil),                 // 15: simpletracker.GetCalendarsRequest
	(*GetCalendarsResponse)(nil),                // 16: simpletracker.GetCalendarsResponse
	(*UpdateCalendarsRequest)(nil),              // 17: simpletracker.UpdateCalendarsRequest
	(*UpdateCalendarAction)(nil),                // 18: simpletracker.UpdateCalendarAction
	(*UpdateCalendarsResponse)(nil),             // 19: simpletracker.UpdateCalendarsResponse
	(*DeleteCalendarRequest)(nil),               // 20: simpletracker.DeleteCalendarRequest
	(*DeleteCalendarResponse)(nil),              // 21: simpletracker.DeleteCalendarResponse
	nil,                                         // 22: simpletracker.ListCalendarsRequestNextToken.DynamodbNextTokenEntry
	nil,                                         // 23: simpletracker.UpdateCalendarsRequest.ActionsEntry
}
var file_calendar_proto_depIdxs = []int32{
	7,  // 0: simpletracker.ListCalendarsRequest.next_token:type_name -> simpletracker.ListCalendarsRequestNextTokenOpaque
	22, // 1: simpletracker.ListCalendarsRequestNextToken.dynamodb_next_token:type_name -> simpletracker.ListCalendarsRequestNextToken.DynamodbNextTokenEntry
	0,  // 2: simpletracker.ListCalendarsResponse.error_reason:type_name -> simpletracker.ListCalendarsErrorReason
	10, // 3: simpletracker.ListCalendarsResponse.calendarSummaries:type_name -> simpletracker.CalendarSummary
	7,  // 4: simpletracker.ListCalendarsResponse.next_token:type_name -> simpletracker.ListCalendarsRequestNextTokenOpaque
	10, // 5: simpletracker.CalendarDetail.summary:type_name -> simpletracker.CalendarSummary
	1,  // 6: simpletracker.CreateCalendarResponse.error_reason:type_name -> simpletracker.CreateCalendarErrorReason
	11, // 7: simpletracker.CreateCalendarResponse.calendar_detail:type_name -> simpletracker.CalendarDetail
	2,  // 8: simpletracker.GetCalendarsResponse.error_reason:type_name -> simpletracker.GetCalendarsErrorReason
	11, // 9: simpletracker.GetCalendarsResponse.calendar_details:type_name -> simpletracker.CalendarDetail
	23, // 10: simpletracker.UpdateCalendarsRequest.actions:type_name -> simpletracker.UpdateCalendarsRequest.ActionsEntry
	3,  // 11: simpletracker.UpdateCalendarAction.action_type:type_name -> simpletracker.UpdateCalendarActionType
	4,  // 12: simpletracker.UpdateCalendarsResponse.error_reason:type_name -> simpletracker.UpdateCalendarsErrorReason
	11, // 13: simpletracker.UpdateCalendarsResponse.calendar_details:type_name -> simpletracker.CalendarDetail
	5,  // 14: simpletracker.DeleteCalendarResponse.error_reason:type_name -> simpletracker.DeleteCalendarErrorReason
	18, // 15: simpletracker.UpdateCalendarsRequest.ActionsEntry.value:type_name -> simpletracker.UpdateCalendarAction
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_calendar_proto_init() }
func file_calendar_proto_init() {
	if File_calendar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_calendar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalendarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalendarsRequestNextTokenOpaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalendarsRequestNextToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalendarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfStrings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCalendarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCalendarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalendarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalendarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCalendarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCalendarAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCalendarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCalendarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCalendarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_calendar_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_calendar_proto_goTypes,
		DependencyIndexes: file_calendar_proto_depIdxs,
		EnumInfos:         file_calendar_proto_enumTypes,
		MessageInfos:      file_calendar_proto_msgTypes,
	}.Build()
	File_calendar_proto = out.File
	file_calendar_proto_rawDesc = nil
	file_calendar_proto_goTypes = nil
	file_calendar_proto_depIdxs = nil
}
