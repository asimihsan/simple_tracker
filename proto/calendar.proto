syntax = "proto3";

package simpletracker;

message ListCalendarsRequest {
    string user_id = 1;
    string session_id = 2;

    // Maximum number of calendar summaries per response page. If 0 or smaller then server will enforce an arbitrary
    // default value.
    int64 max_results = 3;

    // This is a pagination token for the ListCalendars API. This is opaque to clients and clients cannot deserialize it
    // to ListCalendarsRequestNextToken. If clients want to resume pagination they should re-use this.
    ListCalendarsRequestNextTokenOpaque next_token = 4;
}

message ListCalendarsRequestNextTokenOpaque {
    bytes opaque_next_token = 1;
    string encryption_key_used = 2;
}

message ListCalendarsRequestNextToken {
    int64 version = 1;

    // The user ID inside the token must not be used for authorization purposes. Rather you first
    // authorize the request parameters, and then compare to the inner user_id.
    string user_id = 2;

    // The session ID inside the token must not be used for authorization purposes. Rather you first
    // authorize the request parameters, and then compare to the inner session_id.
    string session_id = 3;

    // This is how we'll resume the DynamoDB query, using the last evaluated sort key, i.e. calendar ID. It may be
    // absent (empty map), meaning there are no more pages.
    map<string, string> dynamodb_next_token = 4;

    // Pagination tokens can expire to prevent indefinite re-use.
    int64 expiry_epoch_seconds = 5;
}

message ListCalendarsResponse {
    bool success = 1;
    ListCalendarsErrorReason error_reason = 2;
    repeated CalendarSummary calendarSummaries = 3;
    ListCalendarsRequestNextTokenOpaque next_token = 4;
}

enum ListCalendarsErrorReason {
    LIST_CALENDARS_ERROR_REASON_NO_ERROR = 0;
    LIST_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR = 1;
    LIST_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR = 2;
}

message CalendarSummary {
    // Format version field (not an OCC field).
    int64 formatVersion = 1;

    string ownerUserid = 2;
    string id = 3;
    string name = 4;
    string color = 5;

    // OCC version field.
    int64 version = 6;
}

message CalendarDetail {
    CalendarSummary summary = 1;

    // Highlighted days is a list of strings. This field is first JSON-serialized and then ZLIB-compressed.
    bytes highlighted_days = 2;
}

// Helper proto for a list of strings for highlighted days
message ListOfStrings {
    repeated string strings = 1;
}

message CreateCalendarRequest {
    string user_id = 1;
    string session_id = 2;
    string name = 3;
    string color = 4;   
}

message CreateCalendarResponse {
    bool success = 1;
    CreateCalendarErrorReason error_reason = 2;
    CalendarDetail calendar_detail = 3;
}

enum CreateCalendarErrorReason {
    CREATE_CALENDAR_ERROR_REASON_NO_ERROR = 0;
    CREATE_CALENDAR_ERROR_REASON_INTERNAL_SERVER_ERROR = 1;
    CREATE_CALENDAR_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR = 2;
}

message GetCalendarsRequest {
    string user_id = 1;
    string session_id = 2;
    repeated string calendar_ids = 3;
}

message GetCalendarsResponse {
    bool success = 1;
    GetCalendarsErrorReason error_reason = 2;
    repeated CalendarDetail calendar_details = 3;
}

enum GetCalendarsErrorReason {
    GET_CALENDARS_ERROR_REASON_NO_ERROR = 0;
    GET_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR = 1;
    GET_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR = 2;
    GET_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR = 3;
    GET_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR = 4;
    GET_CALENDARS_ERROR_REASON_TOO_MANY_CALENDARS_ERROR = 5;
}

message UpdateCalendarsRequest {
    string user_id = 1;
    string session_id = 2;

    // Map calendar ID to actions on that calendar
    map<string, UpdateCalendarAction> actions = 3;
}

message UpdateCalendarAction {
    string calendar_id = 1;
    int64 existing_version = 2;
    UpdateCalendarActionType action_type = 3;
    string new_name = 4;
    string new_color = 5;
    string add_highlighted_day = 6;
    string remove_highlighted_day = 7;
}

enum UpdateCalendarActionType {
    UPDATE_CALENDAR_ACTION_TYPE_CHANGE_NAME = 0;
    UPDATE_CALENDAR_ACTION_TYPE_CHANGE_COLOR = 1;
    UPDATE_CALENDAR_ACTION_TYPE_CHANGE_NAME_AND_COLOR = 2;
    UPDATE_CALENDAR_ACTION_TYPE_ADD_HIGHLIGHTED_DAY = 3;
    UPDATE_CALENDAR_ACTION_TYPE_REMOVE_HIGHLIGHTED_DAY = 4;
}

message UpdateCalendarsResponse {
    bool success = 1;
    UpdateCalendarsErrorReason error_reason = 2;
    repeated CalendarDetail calendar_details = 3;
}

enum UpdateCalendarsErrorReason {
    UPDATE_CALENDARS_ERROR_REASON_NO_ERROR = 0;
    UPDATE_CALENDARS_ERROR_REASON_INTERNAL_SERVER_ERROR = 1;
    UPDATE_CALENDARS_ERROR_REASON_COULD_NOT_VERIFY_SESSION_ERROR = 2;
    UPDATE_CALENDARS_ERROR_REASON_DO_NOT_OWN_CALENDAR_ERROR = 3;
    UPDATE_CALENDARS_ERROR_REASON_CALENDAR_NOT_FOUND_ERROR = 4;
    UPDATE_CALENDARS_ERROR_REASON_TOO_MANY_CALENDARS_ERROR = 5;
}